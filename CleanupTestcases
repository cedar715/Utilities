import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.MockitoAnnotations;
import java.nio.file.Path;
import java.nio.file.Files;
import java.time.LocalDateTime;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class FileCleanupServiceTest {
    @Mock
    private FileConfig fileConfig;
    
    @Mock
    private MeterRegistry meterRegistry;
    
    @Mock
    private Counter deletedFilesCounter;
    
    @Mock
    private Timer.Sample timerSample;
    
    @Mock
    private Counter.Builder counterBuilder;
    
    private FileCleanupService cleanupService;
    
    @TempDir
    Path tempDir;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        
        when(fileConfig.getOutputDirectory()).thenReturn(tempDir.toString());
        when(fileConfig.getDeleteFilePattern()).thenReturn(".tmp");
        when(fileConfig.getRetentionDays()).thenReturn(7);
        when(fileConfig.getCleanupLimit()).thenReturn(100);
        
        when(meterRegistry.counter("cleanup.errors")).thenReturn(mock(Counter.class));
        
        // Properly mock the static Counter.builder() method
        try (MockedStatic<Counter> counterMock = mockStatic(Counter.class)) {
            counterMock.when(() -> Counter.builder("cleanup.files.deleted")).thenReturn(counterBuilder);
            when(counterBuilder.description(anyString())).thenReturn(counterBuilder);
            when(counterBuilder.register(meterRegistry)).thenReturn(deletedFilesCounter);
            
            cleanupService = new FileCleanupService(fileConfig, meterRegistry);
        }
    }

    @Test
    void cleanupOldFiles_Success() throws Exception {
        // Create test files
        Path oldFile = createTempFile("old", ".tmp", -10);
        Path newFile = createTempFile("new", ".tmp", -1);
        Path nonMatchingFile = createTempFile("other", ".txt", -10);

        // Mock static Counter.builder for this test
        try (MockedStatic<Counter> counterMock = mockStatic(Counter.class)) {
            counterMock.when(() -> Counter.builder("cleanup.files.deleted")).thenReturn(counterBuilder);
            
            cleanupService.cleanupOldFiles();

            assertFalse(Files.exists(oldFile), "Old file should be deleted");
            assertTrue(Files.exists(newFile), "New file should not be deleted");
            assertTrue(Files.exists(nonMatchingFile), "Non-matching file should not be deleted");
            
            verify(meterRegistry, never()).counter("cleanup.errors");
        }
    }

    // Other test methods should also use MockedStatic...

    private Path createTempFile(String prefix, String suffix, int daysOffset) throws Exception {
        Path file = Files.createTempFile(tempDir, prefix, suffix);
        Files.setLastModifiedTime(file, 
            FileTime.from(LocalDateTime.now().plusDays(daysOffset)
                .toInstant(ZoneOffset.UTC)));
        return file;
    }
}
