import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import io.micrometer.core.instrument.*;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import java.nio.file.*;
import java.time.*;
import java.util.stream.IntStream;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class FileCleanupServiceTest {
    // ... other fields remain same ...

    @Test
    void behavior_HandlesRetryMechanism() throws Exception {
        // Arrange
        Path oldFile = createTempFile("old", ".tmp", -10);
        
        // Mock Files.delete to fail first time
        try (MockedStatic<Files> filesMock = mockStatic(Files.class)) {
            filesMock.when(() -> Files.delete(oldFile))
                .thenThrow(new IOException("First attempt fails"))
                .thenReturn(null); // void method returns null
            
            // Act
            cleanupService.cleanupOldFiles();

            // Verify Files.delete was called twice (initial + 1 retry)
            filesMock.verify(() -> Files.delete(oldFile), times(2));
        }

        assertEquals(1, meterRegistry.counter("cleanup.files.deleted").count());
        verify(meterRegistry, never()).counter("cleanup.errors"); // Should not record error since retry succeeded
    }

    @Test
    void behavior_RetryFailsAfterMaxAttempts() throws Exception {
        // Arrange
        Path oldFile = createTempFile("old", ".tmp", -10);
        
        // Mock Files.delete to always fail
        try (MockedStatic<Files> filesMock = mockStatic(Files.class)) {
            filesMock.when(() -> Files.delete(oldFile))
                .thenThrow(new IOException("Delete failed"));
            
            // Act
            cleanupService.cleanupOldFiles();

            // Verify Files.delete was called 3 times (initial + 2 retries)
            filesMock.verify(() -> Files.delete(oldFile), times(3));
        }

        assertEquals(0, meterRegistry.counter("cleanup.files.deleted").count());
        assertEquals(1, meterRegistry.counter("cleanup.errors").count());
    }

    // ... rest of the test class remains same ...
}
