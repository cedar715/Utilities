
import yaml
import sys
from collections.abc import Mapping

def find_subscriptions(data, results=None):
    """
    Recursively find all 'subscriptions' keys in a nested YAML structure
    and collect their values.
    """
    if results is None:
        results = []
        
    if isinstance(data, Mapping):
        for key, value in data.items():
            if key == 'subscriptions' and isinstance(value, list):
                results.extend(value)
            elif isinstance(value, (dict, list)):
                find_subscriptions(value, results)
    elif isinstance(data, list):
        for item in data:
            if isinstance(item, (dict, list)):
                find_subscriptions(item, results)
                
    return results

def process_yaml_file(file_path):
    """
    Process a YAML file to extract and consolidate all 'subscriptions' elements.
    """
    try:
        with open(file_path, 'r') as file:
            yaml_data = yaml.safe_load(file)
            
        # Find all subscriptions
        all_subscriptions = find_subscriptions(yaml_data)
        
        # Create output dictionary with consolidated subscriptions
        output = {'subscriptions': all_subscriptions}
        
        # Convert back to YAML
        consolidated_yaml = yaml.dump(output, default_flow_style=False, sort_keys=False)
        
        return consolidated_yaml
    except Exception as e:
        return f"Error processing file: {str(e)}"

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python script.py <yaml_file_path>")
        sys.exit(1)
        
    file_path = sys.argv[1]
    result = process_yaml_file(file_path)
    print(result)
