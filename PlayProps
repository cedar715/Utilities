import yaml
import os
import sys
from collections.abc import Mapping

def find_subscriptions(data, results=None):
    """
    Recursively find all 'subscriptions' keys in a nested YAML structure
    and collect their values.
    """
    if results is None:
        results = []
        
    if isinstance(data, Mapping):
        for key, value in data.items():
            if key == 'subscriptions' and isinstance(value, list):
                results.extend(value)
            elif isinstance(value, (dict, list)):
                find_subscriptions(value, results)
    elif isinstance(data, list):
        for item in data:
            if isinstance(item, (dict, list)):
                find_subscriptions(item, results)
                
    return results

def search_yaml_files(folder_path, search_text):
    """
    Search for the specified text in all YAML files in the given folder
    and collect subscriptions from files where the text is found.
    """
    all_subscriptions = []
    
    # Get all yaml files in the folder
    yaml_files = [f for f in os.listdir(folder_path) 
                 if os.path.isfile(os.path.join(folder_path, f)) 
                 and (f.endswith('.yaml') or f.endswith('.yml'))]
    
    for file_name in yaml_files:
        file_path = os.path.join(folder_path, file_name)
        try:
            # Read the file first as text to search for the string
            with open(file_path, 'r') as file:
                file_content = file.read()
                
            # If search text is found in the file
            if search_text in file_content:
                # Parse the YAML and extract subscriptions
                with open(file_path, 'r') as file:
                    yaml_data = yaml.safe_load(file)
                    
                # Find all subscriptions in this file
                file_subscriptions = find_subscriptions(yaml_data)
                all_subscriptions.extend(file_subscriptions)
                    
        except Exception as e:
            print(f"Error processing file {file_name}: {str(e)}", file=sys.stderr)
    
    return all_subscriptions

def format_output(subscriptions):
    """
    Format the subscriptions list in the requested output format
    """
    # Remove duplicates while preserving order
    unique_subscriptions = []
    for item in subscriptions:
        if item not in unique_subscriptions:
            unique_subscriptions.append(item)
    
    result = "subscriptions:\n"
    for subscription in unique_subscriptions:
        result += f"* {subscription}\n"
    
    return result

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python script.py <folder_path> <search_text>")
        sys.exit(1)
        
    folder_path = sys.argv[1]
    search_text = sys.argv[2]
    
    # Search files and collect subscriptions
    subscriptions = search_yaml_files(folder_path, search_text)
    
    # Format and print the result
    output = format_output(subscriptions)
    print(output)
