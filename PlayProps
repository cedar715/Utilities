---
- name: Deploy cAdvisor as a systemd service with Podman
  hosts: target_vms
  become: yes
  vars:
    cadvisor_version: "v0.51.0"
    cadvisor_url: "https://artifactory.global.example.com/artifactory/vendor-generic-staging-local/cadvisor-{{ cadvisor_version }}-linux-amd64"
    cadvisor_path: "/apps/cadvisor"
    docker_socket: "/docker.sock"
  
  tasks:
    - name: Get current user's UID
      command: id -u
      register: current_uid
      changed_when: false
      become: no
      
    - name: Get Podman socket path from podman info
      shell: podman info --format '{% raw %}{{.Host.RemoteSocket.Path}}{% endraw %}'
      register: podman_socket_path
      changed_when: false
      become: no
      failed_when: false
      
    - name: Set default Podman socket path if command fails
      set_fact:
        podman_socket: "/run/user/{{ current_uid.stdout }}/podman/podman.sock"
      when: podman_socket_path.rc != 0 or podman_socket_path.stdout == ""
      
    - name: Set Podman socket path from command output
      set_fact:
        podman_socket: "{{ podman_socket_path.stdout }}"
      when: podman_socket_path.rc == 0 and podman_socket_path.stdout != ""
      
    - name: Display determined Podman socket path
      debug:
        msg: "Using Podman socket path: {{ podman_socket }}"
    
    - name: Create directory for cAdvisor
      file:
        path: "{{ cadvisor_path }}"
        state: directory
        mode: '0755'
      
    - name: Download cAdvisor binary
      get_url:
        url: "{{ cadvisor_url }}"
        dest: "{{ cadvisor_path }}/cadvisor"
        mode: '0755'
      register: download_result
      
    - name: Check if podman socket exists
      stat:
        path: "{{ podman_socket }}"
      register: podman_socket_stat
      
    - name: Fail if podman socket doesn't exist
      fail:
        msg: "Podman socket not found at {{ podman_socket }}. Please check your Podman installation."
      when: not podman_socket_stat.stat.exists
      
    - name: Create systemd service file for cAdvisor
      template:
        src: cadvisor.service.j2
        dest: /etc/systemd/system/cadvisor.service
        mode: '0644'
      vars:
        podman_socket_path: "{{ podman_socket }}"
      register: service_file
      
    - name: Create cadvisor service template
      copy:
        dest: cadvisor.service.j2
        content: |
          [Unit]
          Description=cAdvisor monitoring service
          Documentation=https://github.com/google/cadvisor
          After=network.target
          
          [Service]
          Type=simple
          ExecStart={{ cadvisor_path }}/cadvisor --podman unix:///{{ podman_socket_path }} --docker unix:///{{ docker_socket }}
          Restart=always
          RestartSec=10
          
          # Security hardening options
          ProtectSystem=full
          ProtectHome=true
          PrivateTmp=true
          NoNewPrivileges=true
          
          [Install]
          WantedBy=multi-user.target
      delegate_to: localhost
      run_once: true
      
    - name: Reload systemd to recognize new service
      systemd:
        daemon_reload: yes
      when: service_file.changed
      
    - name: Enable and start cAdvisor service
      systemd:
        name: cadvisor
        state: started
        enabled: yes
      
    - name: Verify cAdvisor service is running
      systemd:
        name: cadvisor
        state: started
      register: cadvisor_service
      
    - name: Show status of cAdvisor service
      debug:
        msg: "cAdvisor service is {{ cadvisor_service.status.ActiveState }}"
